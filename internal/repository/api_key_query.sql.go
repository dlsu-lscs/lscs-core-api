// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: api_key_query.sql

package repository

import (
	"context"
	"database/sql"
)

const createAPIKey = `-- name: CreateAPIKey :execresult
INSERT INTO api_keys (
    member_email,
    api_key_hash,
    expires_at
) VALUES (
    ?, ?, ?
)
`

type CreateAPIKeyParams struct {
	MemberEmail string
	ApiKeyHash  string
	ExpiresAt   sql.NullTime
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAPIKey, arg.MemberEmail, arg.ApiKeyHash, arg.ExpiresAt)
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT api_key_id, member_email, api_key_hash, created_at, expires_at FROM api_keys
WHERE api_key_id = ?
`

func (q *Queries) GetAPIKey(ctx context.Context, apiKeyID int32) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKey, apiKeyID)
	var i ApiKey
	err := row.Scan(
		&i.ApiKeyID,
		&i.MemberEmail,
		&i.ApiKeyHash,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getAPIKeyByEmail = `-- name: GetAPIKeyByEmail :one
SELECT api_key_id, member_email, api_key_hash, created_at, expires_at FROM api_keys
WHERE member_email = ?
`

func (q *Queries) GetAPIKeyByEmail(ctx context.Context, memberEmail string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyByEmail, memberEmail)
	var i ApiKey
	err := row.Scan(
		&i.ApiKeyID,
		&i.MemberEmail,
		&i.ApiKeyHash,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
